{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Operation Research\"\n",
        "\n",
        "institute: |\n",
        "  <div style=\"font-size: 1.4em; font-weight: bold; margin-bottom: 20px;\">\n",
        "    Institute of Technology of Cambodia\n",
        "  </div>\n",
        "  <div style=\"margin-top: 10px; margin-bottom: 20px; text-align: center;\">\n",
        "    <img src=\"image/itc-logo.png\" alt=\"ITC Logo\" style=\"height:120px; margin-right:10px;\">\n",
        "    <img src=\"image/AMS.jpg\" alt=\"AMS Logo\" style=\"height:140px;\">\n",
        "  </div>\n",
        "  <div style=\"font-size: 1.2em; font-weight: bold; margin-top: 20px;\">\n",
        "    Lecturer: Sothearith MIN\n",
        "  </div>\n",
        "\n",
        "author: \" \"\n",
        "format:\n",
        "  revealjs:\n",
        "    theme: [default, custom.scss]\n",
        "    transition: slide\n",
        "    background-transition: fade\n",
        "    slide-number: true\n",
        "    chalkboard: true\n",
        "    footer: \"Operation Research | Institute of Technology of Cambodia\"\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Course Overview"
      ],
      "id": "d1788d96"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 8,
        "fig-height": 3
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "components = ['Attendance', 'Assignment', 'Class Activities', 'Mid-term', 'Final']\n",
        "percentages = [10, 10, 10, 30, 40]\n",
        "colors = ['#80ffdb', '#56cfe1', '#6930c3', '#7400b8', '#001233']  \n",
        "\n",
        "fig, ax = plt.subplots(figsize=(8, 3))\n",
        "\n",
        "for i, (comp, pct, color) in enumerate(zip(components, percentages, colors)):\n",
        "    ax.scatter(i, 0, s=pct*40, color=color, edgecolor='white', linewidth=1.5)\n",
        "    ax.text(i, -0.15, comp, ha='center', va='center', fontsize=12, fontname='Trebuchet MS')\n",
        "    ax.text(i, 0.2, f'{pct}%', ha='center', va='center', fontsize=14, fontweight='bold', fontname='Trebuchet MS')\n",
        "\n",
        "ax.set_xlim(-0.5, len(components)-0.5)\n",
        "ax.set_ylim(-0.5, 0.5)\n",
        "ax.axis('off')\n",
        "ax.set_title('Assessment Distribution', fontsize=16, fontweight='bold', fontname='Trebuchet MS', pad=10)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7a87cb0f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Programming Tools\n",
        "\n",
        "We will use **Python** in **Jupyter Notebook** or **Google Colab** to solve complex problems. \n",
        "\n",
        "## Course Syllabus\n",
        "\n",
        "<object data=\"image/Course Syllabus Operation Research.pdf\" \n",
        "        type=\"application/pdf\" \n",
        "        width=\"100%\" \n",
        "        height=\"600px\">\n",
        "    <p>Your browser does not support PDFs. \n",
        "       <a href=\"image/Course Syllabus Operation Research.pdf\">Download PDF</a>\n",
        "    </p>\n",
        "</object>\n",
        "\n",
        "\n",
        "## Share your expectations for this course\n",
        "\n",
        "<div style=\"text-align: center; font-family: 'Trebuchet MS', sans-serif;\">\n",
        "\n",
        "<p style=\"font-size: 1.1em; margin-bottom: 15px;\">\n",
        "üëâ Please visit <a href=\"https://www.menti.com\" target=\"_blank\"><b>menti.com</b></a> and enter the code:\n",
        "</p>\n",
        "\n",
        "<p style=\"font-size: 1.6em; font-weight: bold; color: #7400b8; background-color: #f3f0ff; display: inline-block; padding: 8px 12px; border-radius: 8px; margin: 12px 0;\">\n",
        "5471&nbsp;7573\n",
        "</p>\n",
        "\n",
        "</div>\n",
        "\n",
        "<iframe src=\"https://www.mentimeter.com/app/presentation/al7fieuxa7qn6k4axt1fdnj74d8uk6wt/present?question=5nkbkugzhdte\"\n",
        "        width=\"100%\" height=\"400px\"\n",
        "        style=\"border:none; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">\n",
        "</iframe>\n",
        "\n",
        "# Introduction to Operation Research (OR){.white-background}\n",
        "\n",
        "\n",
        "## So, what is OR?\n",
        "\n",
        "> \"**Operation Research** *is the application of scientific methods to the study of problems arising in the management of large systems of men, machines, materials, and money.*\"  \n",
        "> ‚Äî **George B. Dantzig**, *the father of Linear Programming(LP)*\n",
        "\n",
        "<div style=\"text-align:center; margin-top:10px;\">\n",
        "  ![](image/Dantzig_vertical.jpeg){width=250px style=\"border-radius:10px;\"}\n",
        "</div>\n",
        "\n",
        "## History of OR\n",
        "### George B. Dantzig ‚Äì Father of LP & OR\n",
        "\n",
        "**George B. Dantzig (1914‚Äì2005)** developed linear programming methods that became fundamental to Operations Research, helping optimize resource allocation in military and civilian applications.\n",
        "\n",
        "In *World War II*, **George B. Dantzig** joined the US Air Force‚Äôs Operations Research team. He applied mathematical methods to solve practical problems, helping the Air Force plan flight schedules, optimize aircraft deployment, and improve mission efficiency.\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## History of OR\n",
        "### The use of OR in WW II\n",
        "\n",
        "During World War II, the US Air Force faced a problem:\n",
        "\n",
        "* They had **limited aircraft and resources**.\n",
        "\n",
        "* They needed to **schedule** reconnaissance, bombing, and transport missions efficiently.\n",
        "\n",
        "* Mistakes or inefficiencies could **waste** fuel, **delay** missions, or **reduce** coverage.\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## History of OR\n",
        "### The use of OR in WW II\n",
        "\n",
        "\n",
        "That would not be a problem if the the scale is small.\n",
        "\n",
        "<details>\n",
        "<summary>Show mermaid code</summary>\n",
        "```default\n",
        "flowchart LR\n",
        "    Base[\"üìç Base\"] ---|üõ©Ô∏è| M1[\"üìç Mission 1\"]\n",
        "    M1 ---|üõ©Ô∏è| M2[\"üìç Mission 2\"]\n",
        "    M2 ---|üõ©Ô∏è| M3[\"üìç Mission 3\"]\n",
        "    M3 ---|üõ©Ô∏è| Base\n",
        "```\n",
        "\n",
        "</details>\n",
        "```{mermaid}\n",
        "%%| echo: false\n",
        "\n",
        "flowchart LR\n",
        "    Base[\"üìç Base\"] ---|üõ©Ô∏è| M1[\"üìç Mission 1\"]\n",
        "    M1 ---|üõ©Ô∏è| M2[\"üìç Mission 2\"]\n",
        "    M2 ---|üõ©Ô∏è| M3[\"üìç Mission 3\"]\n",
        "    M3 ---|üõ©Ô∏è| Base\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## History of OR\n",
        "### The use of OR in WW II\n",
        "\n",
        "But, it gets more complicated when scale become larger. \n",
        "\n",
        "**For example:**\n",
        "\n",
        "* Two airplanes.\n",
        "\n",
        "* Fuel limitation ‚Üí refuel required.\n",
        "\n",
        "* Time constraints ‚Üí missions have priority.\n",
        "\n",
        "* Airplanes must return to base.\n",
        "\n",
        "---\n",
        "\n",
        "## History of OR\n",
        "### The use of OR in WW II\n",
        "\n",
        "<details>\n",
        "<summary>Code for this Fig.</summary>\n",
        "```default\n",
        "flowchart LR\n",
        "    Base[\"üìç Base\"] --> Plane1[\"<span style='font-size: 2em'>üõ©Ô∏è</span>\"]\n",
        "    Plane1 --> M1[\"üìç Mission 1\"]\n",
        "    M1 --> M2[\"üìç Mission 2\"]\n",
        "    M2 --> R[\"‚õΩ Refuel\"]\n",
        "    R --> M3[\"üìç Mission 3\"]\n",
        "    M3 --> Base\n",
        "\n",
        "    Base --> Plane2[\"<span style='font-size: 2em'>üõ©Ô∏è</span>\"]\n",
        "    Plane2 --> M4[\"üìç Mission 4\"]\n",
        "    M4 --> M5[\"üìç Mission 5\"]\n",
        "    M5 --> R\n",
        "    R --> M6[\"üìç Mission 6\"]\n",
        "    M6 --> Base\n",
        "```\n",
        "\n",
        "</details>\n",
        "```{mermaid}\n",
        "%%| echo: false\n",
        "\n",
        "flowchart LR\n",
        "    Base[\"üìç Base\"] --> Plane1[\"<span style='font-size: 2em'>üõ©Ô∏è</span>\"]\n",
        "    Plane1 --> M1[\"üìç Mission 1\"]\n",
        "    M1 --> M2[\"üìç Mission 2\"]\n",
        "    M2 --> R[\"‚õΩ Refuel\"]\n",
        "    R --> M3[\"üìç Mission 3\"]\n",
        "    M3 --> Base\n",
        "\n",
        "    Base --> Plane2[\"<span style='font-size: 2em'>üõ©Ô∏è</span>\"]\n",
        "    Plane2 --> M4[\"üìç Mission 4\"]\n",
        "    M4 --> M5[\"üìç Mission 5\"]\n",
        "    M5 --> R\n",
        "    R --> M6[\"üìç Mission 6\"]\n",
        "    M6 --> Base\n",
        "```\n",
        "\n",
        "## History of OR\n",
        "### The use of OR in WW II\n",
        "#### The Birth of the *Simplex* Method\n",
        "\n",
        "Observing these problems, **George Dantzig** created a well-known method called the **Simplex** method, which:\n",
        "\n",
        "* Provides a systematic procedure for solving linear programming problems.\n",
        "* Helps optimize resource allocation under constraints.\n",
        "* Became a foundational tool in Operations Research and optimization.\n",
        "\n",
        "---\n",
        "\n",
        "## History of OR \n",
        "### Post world war \n",
        "\n",
        "* OR methods gained popularity in industry and government.\n",
        "* Focus shifted from military applications to **commercial and industrial problems**.\n",
        "* The success of OR during the war demonstrated its **practical value**.\n",
        "\n",
        "---\n",
        "\n",
        "## History of OR \n",
        "### United Airlines Case Study\n"
      ],
      "id": "4725d9e1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-united-staffing\n",
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from scipy.interpolate import make_interp_spline\n",
        "\n",
        "time_slots = ['0-6', '6-8', '8-10', '10-12', '12-14', '14-16', '16-18', '18-20', '20-22', '22-24']\n",
        "personnel = [6, 10, 15, 20, 16, 24, 28, 20, 10, 10]\n",
        "\n",
        "\n",
        "x = np.arange(len(time_slots))\n",
        "x_smooth = np.linspace(x.min(), x.max(), 300)\n",
        "\n",
        "\n",
        "spl = make_interp_spline(x, personnel, k=3)\n",
        "personnel_smooth = spl(x_smooth)\n",
        "\n",
        "\n",
        "plt.style.use('seaborn-v0_8-whitegrid')\n",
        "fig, ax = plt.subplots(figsize=(14, 7), facecolor='white')\n",
        "\n",
        "\n",
        "ax.fill_between(x_smooth, personnel_smooth, alpha=0.2, color='#3b82f6')\n",
        "\n",
        "\n",
        "ax.plot(x_smooth, personnel_smooth, color='#2563eb', linewidth=3.5, label='Demand Pattern', zorder=2)\n",
        "\n",
        "# Plot actual data points\n",
        "ax.scatter(x, personnel, color='#1e40af', s=120, zorder=3, edgecolors='white', linewidth=2)\n",
        "\n",
        "# Add value labels on points\n",
        "for i, (xi, yi) in enumerate(zip(x, personnel)):\n",
        "    ax.annotate(f'{yi}', xy=(xi, yi), xytext=(0, 12), \n",
        "                textcoords='offset points', ha='center', \n",
        "                fontsize=11, fontweight='bold', color='#1e40af',\n",
        "                bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='#3b82f6', linewidth=1.5))\n",
        "\n",
        "\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(time_slots, fontsize=11)\n",
        "ax.set_xlabel('Time Period (Hours)', fontsize=13, fontweight='bold', color='#1f2937', labelpad=10)\n",
        "ax.set_ylabel('Personnel Required', fontsize=13, fontweight='bold', color='#1f2937', labelpad=10)\n",
        "ax.set_title('United Airlines Airport Staffing.', \n",
        "             fontsize=16, fontweight='bold', color='#111827', pad=20)\n",
        "\n",
        "# Customize grid\n",
        "ax.grid(True, alpha=0.25, linestyle='-', linewidth=0.8, color='#94a3b8')\n",
        "ax.set_axisbelow(True)\n",
        "\n",
        "# Set y-axis limits with padding\n",
        "ax.set_ylim(0, max(personnel) + 5)\n",
        "\n",
        "# Remove top and right spines\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "ax.spines['left'].set_color('#cbd5e1')\n",
        "ax.spines['bottom'].set_color('#cbd5e1')\n",
        "\n",
        "# Add legend\n",
        "ax.legend(loc='upper left', fontsize=11, frameon=True, shadow=True, fancybox=True)\n",
        "\n",
        "# Tight layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-united-staffing",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "----\n",
        "\n",
        "## History of OR \n",
        "### United Airlines Case Study\n",
        "\n",
        "**The Optimization Problem:**\n",
        "\n",
        "How many people will you hire?\n",
        "\n",
        "- Each person works for eight hours **continuously**.\n",
        "- They may start their shifts at different time.\n",
        "\n",
        "**Business Impact:**\n",
        "\n",
        "Linear programming is used by United Airlines to reduce the number of flight delays by **50%** and save more than **$5** million per year in 1992.\n",
        "\n",
        "\n",
        "# The Review of Linear Programming \n",
        "\n",
        "## Definition \n",
        "\n",
        "> **Linear Programming (LP)** is a mathematical method for determining a way to achieve the **best outcome** (such as maximum profit or minimum cost) in a **given mathematical model** whose requirements are represented by **linear relationships**.  \n",
        "> ‚Äî Winston, W. L. (2004). *Operations Research: Applications and Algorithms*, 4th Edition.\n",
        "\n",
        "**Example**\n",
        "\n",
        "**Scenario**: A factory produces two products: **A** and **B**.\n",
        "\n",
        "Each product uses **resources**: labor and materials.\n",
        "\n",
        "Each product gives a profit: Product **A gives $5/unit**, Product **B gives $3/unit**.\n",
        "\n",
        "**Goal**: Decide how many units of A and B to produce to maximize total profit.\n",
        "\n",
        "**Constraints**: Limited labor hours and material availability.\n",
        "\n",
        "## Terminology \n",
        "\n",
        "**Decision Variables**: The decision variable refers to any candidate (person, service, projects, jobs, tasks) competing with other decision variables for limited resources.\n",
        "\n",
        "**Objective Function**: The Linear Programming Problem must have a well defined objective function to optimize the results. For instance, minimization of cost or maximization of profits. It should be expressed as linear function of decision variables.\n",
        "\n",
        "**Constraints**: There would be limitations on resources which are to be allocated among various competing activities. These must be capable of being expressed as linear equalities or inequalities in terms of decision variables.\n",
        "\n",
        "## Terminology\n",
        "\n",
        "**Alternative Courses of Action**: There must be the presence of alternative solutions for the purpose of choosing the best or optimum one.\n",
        "\n",
        "**Non-Negativity Restrictions:** All variables must assume non-negative values. If any of the variables is unrestricted in sign, a tool can be employed which will enforce the non-negativity without changing the original information of the problem.\n",
        "\n",
        "**Linearity and Divisibility:** All relationships (objective function and constraints) must exhibit linearity, i.e., the relationship among decision variables must be directly proportional. It is assumed that decision variables are continuous, i.e., fractional values of variables must be permissible in obtaining the optimum solution.\n",
        "\n",
        "## Standard Form of LP Models\n",
        "\n",
        "**Objective:** Maximize  \n",
        "$$\n",
        "Z = c_1 x_1 + c_2 x_2 + \\dots + c_n x_n\n",
        "$$\n",
        "\n",
        "**Constraints:**  \n",
        "$$\n",
        "\\begin{aligned}\n",
        "a_{11} x_1 + \\dots + a_{1n} x_n &\\le b_1 \\\\\n",
        "a_{21} x_1 + \\dots + a_{2n} x_n &\\le b_2 \\\\\n",
        "\\vdots \\\\\n",
        "a_{m1} x_1 + \\dots + a_{mn} x_n &\\le b_m\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "**Non-negativity:**  \n",
        "$$\n",
        "x_1, x_2, \\dots, x_n \\ge 0\n",
        "$$\n",
        "\n",
        "## Formulation of LP Models \n",
        "\n",
        "Steps for Formulating LP problems\n",
        "\n",
        " . . .\n",
        "\n",
        "1. Identify the nature of the problem (maximization minimization problem).\n",
        "\n",
        ". . .\n",
        "\n",
        "\n",
        "2. Identify the number of variables to establish the objective function.\n",
        "\n",
        ". . .\n",
        "\n",
        "\n",
        "3. Formulate the constraints.\n",
        "\n",
        ". . .\n",
        "\n",
        "\n",
        "4. Develop non-negativity constraints.\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "\n",
        "### Example 1\n",
        "\n",
        "#### Paint Blending\n",
        "\n",
        "A paint manufacturer produces two types of paints using two raw materials. One ton of **Paint 1** requires 4 units of material A and 3 units of material B. One ton of **Paint 2** requires 3 units of material A and 6 units of material B. The company has **24 units of A** and **30 units of B** available. The profit per ton of Paint 1 and Paint 2 is **\\$5** and **\\$4**, respectively.\n",
        "\n",
        "**Question:** Formulate a Linear Programming model to maximize profit.\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "\n",
        "### Example 1\n",
        "\n",
        "**Step 1: Decision Variables**\n",
        "\n",
        "- $x_1$ = tons of Paint 1 to produce\n",
        "- $x_2$ = tons of Paint 2 to produce\n",
        "\n",
        "**Step 2: Organize the Data**\n",
        "\n",
        "| Resource    | Paint 1 | Paint 2 | Available |\n",
        "|-------------|:-------:|:-------:|:---------:|\n",
        "| Material A  | 4       | 3       | 24        |\n",
        "| Material B  | 3       | 6       | 30        |\n",
        "| **Profit**  | **\\$5** | **\\$4** | Maximize  |\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "\n",
        "### Example 1\n",
        "\n",
        "**Step 3: Objective Function**\n",
        "\n",
        "Maximize total profit:\n",
        "\n",
        "$$\\text{Maximize } Z = 5x_1 + 4x_2$$\n",
        "\n",
        "where $Z$ is the total profit in dollars.\n",
        "\n",
        "\n",
        "\n",
        "**Step 4: Constraints**\n",
        "\n",
        "- **Material A:** $4x_1 + 3x_2 \\leq 24$\n",
        "- **Material B:** $3x_1 + 6x_2 \\leq 30$\n",
        "- **Non-negativity:** $x_1, x_2 \\geq 0$\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "\n",
        "### Model \n",
        "\n",
        "**Maximize:** $Z = 5x_1 + 4x_2$\n",
        "\n",
        "**Subject to:**\n",
        "$$\\begin{align}\n",
        "4x_1 + 3x_2 &\\leq 24 \\quad \\text{(Material A)}\\\\\n",
        "3x_1 + 6x_2 &\\leq 30 \\quad \\text{(Material B)}\\\\\n",
        "x_1, x_2 &\\geq 0 \\quad \\text{(Non-negativity)}\n",
        "\\end{align}$$\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "### Example 2\n",
        "\n",
        "#### Product Mix Problem\n",
        "\n",
        "A factory manufactures two products: **Product A** and **Product B**. Each product requires processing on two machines:\n",
        "\n",
        "- **Product A:** 2 hours on Machine 1, 1 hour on Machine 2, profit \\$30\n",
        "- **Product B:** 1 hour on Machine 1, 2 hours on Machine 2, profit \\$40\n",
        "- **Available:** Machine 1 has 100 hours, Machine 2 has 80 hours\n",
        "\n",
        "**Question:** Formulate the LP model to maximize profit.\n",
        "\n",
        "--- \n",
        "\n",
        "## Standard Form of LP Models\n",
        "### Example 2\n",
        "\n",
        "\n",
        "**Step 1: Decision Variables**\n",
        "\n",
        "- $x_1$ = units of Product A to manufacture\n",
        "- $x_2$ = units of Product B to manufacture\n",
        "\n",
        "\n",
        "**Step 2: Organize the Data**\n",
        "\n",
        "| Resource    | Product A | Product B | Available |\n",
        "|-------------|:---------:|:---------:|:---------:|\n",
        "| Machine 1   | 2 hrs     | 1 hr      | 100 hrs   |\n",
        "| Machine 2   | 1 hr      | 2 hrs     | 80 hrs    |\n",
        "| **Profit**  | **\\$30**  | **\\$40**  | Maximize  |\n",
        "\n",
        "---\n",
        "\n",
        "**Step 3: Objective Function**\n",
        "\n",
        "Maximize total profit:\n",
        "\n",
        "$\\text{Maximize } Z = 30x_1 + 40x_2$\n",
        "\n",
        "**Step 4: Constraints**\n",
        "\n",
        "- **Machine 1:** $2x_1 + x_2 \\leq 100$\n",
        "- **Machine 2:** $x_1 + 2x_2 \\leq 80$\n",
        "- **Non-negativity:** $x_1, x_2 \\geq 0$\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Standard Form of LP Models\n",
        "### Example 2\n",
        "\n",
        "#### Model \n",
        "\n",
        "**Maximize:** $Z = 30x_1 + 40x_2$\n",
        "\n",
        "**Subject to:**\n",
        "$\\begin{align}\n",
        "2x_1 + x_2 &\\leq 100 \\quad \\text{(Machine 1)}\\\\\n",
        "x_1 + 2x_2 &\\leq 80 \\quad \\text{(Machine 2)}\\\\\n",
        "x_1, x_2 &\\geq 0 \\quad \\text{(Non-negativity)}\n",
        "\\end{align}$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "Linear programming problems involving **two variables** can be easily represented and solved using the graphical method. Although such two-variable problems are rarely encountered in real-life applications, understanding this approach provides a useful foundation.\n"
      ],
      "id": "264f716a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: \"Code for this Fig.\"\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(15, 10))\n",
        "\n",
        "ax.set_xlim(-20, 55)\n",
        "ax.set_ylim(-20, 55)\n",
        "\n",
        "ax.arrow(-20, 0, 73, 0, head_width=2, head_length=2, \n",
        "         fc='#1F5BFF', ec='#1F5BFF', linewidth=2)\n",
        "\n",
        "ax.arrow(0, -20, 0, 73, head_width=2, head_length=2, \n",
        "         fc='#1F5BFF', ec='#1F5BFF', linewidth=2)\n",
        "\n",
        "ax.set_xticks(np.arange(-10, 51, 10))\n",
        "ax.set_yticks(np.arange(-10, 51, 10))\n",
        "ax.tick_params(axis='both', which='major', labelsize=35)\n",
        "\n",
        "ax.grid(True, alpha=0.4, linestyle='--', linewidth=1)\n",
        "\n",
        "ax.text(53, -4, 'x', fontsize=40, fontweight='bold')\n",
        "ax.text(-4, 53, 'y', fontsize=40, fontweight='bold')\n",
        "\n",
        "for spine in ax.spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2d7f7f59",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Graphical Method\n",
        "\n",
        "### Steps\n",
        "\n",
        "::: {.fragment}\n",
        "1. Convert each inequality constraint into an equation.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "2. Plot all the equations on a graph.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "3. Identify the feasible region ‚Äî every point on each line satisfies its corresponding equation.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "4. For \"‚â§\" constraints, shade below the line; for \"‚â•\", shade above.  \n",
        "The overlapping area that satisfies all constraints is the **feasible region**.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "5. Determine the coordinates of all corner (vertex) points of the feasible region.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "6. Substitute these coordinates into the objective function to calculate the value of \\( Z \\) for each point.\n",
        ":::\n",
        "\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "### Example \n",
        "\n",
        "Taking problem from **Example 1**: \n",
        "\n",
        "**Maximize:** $Z = 5x_1 + 4x_2$\n",
        "\n",
        "**Subject to:**\n",
        "$$\\begin{align}\n",
        "4x_1 + 3x_2 &\\leq 24 \\quad \\text{(Material A)}\\\\\n",
        "3x_1 + 6x_2 &\\leq 30 \\quad \\text{(Material B)}\\\\\n",
        "x_1, x_2 &\\geq 0 \\quad \\text{(Non-negativity)}\n",
        "\\end{align}$$\n",
        "\n",
        "---\n",
        "\n",
        "#### Step 1: Convert to Equations\n",
        "\n",
        "Convert inequalities to equations:\n",
        "\n",
        "- Material A: $4x_1 + 3x_2 = 24$\n",
        "- Material B: $3x_1 + 6x_2 = 30$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "### Step 2: Find Intercepts\n",
        "\n",
        "For **Material A:** $4x_1 + 3x_2 = 24$\n",
        "\n",
        "- When $x_1 = 0$: $3x_2 = 24$ ‚Üí $x_2 = 8$\n",
        "- When $x_2 = 0$: $4x_1 = 24$ ‚Üí $x_1 = 6$\n",
        "\n",
        "For **Material B:** $3x_1 + 6x_2 = 30$\n",
        "\n",
        "- When $x_1 = 0$: $6x_2 = 30$ ‚Üí $x_2 = 5$\n",
        "- When $x_2 = 0$: $3x_1 = 30$ ‚Üí $x_1 = 10$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 3: Plot the Constraints"
      ],
      "id": "5eb96105"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 12, 400)\n",
        "x2_A = (24 - 4*x1) / 3\n",
        "x2_B = (30 - 3*x1) / 6\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_A, color='#2563eb', linewidth=3, label='Material A: $4x_1 + 3x_2 = 24$')\n",
        "plt.plot(x1, x2_B, color='#dc2626', linewidth=3, label='Material B: $3x_1 + 6x_2 = 30$')\n",
        "\n",
        "plt.scatter([6, 0, 10, 0], [0, 8, 0, 5], color='black', s=80, zorder=5)\n",
        "plt.text(6, -0.5, '(6, 0)', ha='center', fontsize=14)\n",
        "plt.text(-0.6, 8, '(0, 8)', fontsize=14)\n",
        "plt.text(10, -0.5, '(10, 0)', ha='center', fontsize=14)\n",
        "plt.text(-0.6, 5, '(0, 5)', fontsize=14)\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Constraint Lines', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.grid(alpha=0.25)\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-1, 12)\n",
        "plt.ylim(-1, 10)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "006fee8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---"
      ],
      "id": "29fbad32"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 12, 400)\n",
        "x2_A = (24 - 4*x1) / 3\n",
        "x2_B = (30 - 3*x1) / 6\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_A, color='#2563eb', linewidth=3, label='Material A: $4x_1 + 3x_2 = 24$')\n",
        "plt.plot(x1, x2_B, color='#dc2626', linewidth=3, label='Material B: $3x_1 + 6x_2 = 30$')\n",
        "\n",
        "# Add arrows perpendicular to constraint lines\n",
        "# For Material A: 4x1 + 3x2 = 24, the gradient (normal vector) is (4, 3)\n",
        "arrow_length = 1\n",
        "x1_point_A = 3\n",
        "x2_point_A = (24 - 4*x1_point_A) / 3\n",
        "normal_A = np.array([-4, -3])\n",
        "normal_A = normal_A / np.linalg.norm(normal_A) * arrow_length\n",
        "plt.arrow(x1_point_A, x2_point_A, normal_A[0], normal_A[1], \n",
        "          head_width=0.3, head_length=0.25, fc='#2563eb', ec='#2563eb', linewidth=2.5)\n",
        "\n",
        "# For Material B: 3x1 + 6x2 = 30, the gradient (normal vector) is (3, 6)\n",
        "x1_point_B = 6\n",
        "x2_point_B = (30 - 3*x1_point_B) / 6\n",
        "normal_B = np.array([-3, -6])\n",
        "normal_B = normal_B / np.linalg.norm(normal_B) * arrow_length\n",
        "plt.arrow(x1_point_B, x2_point_B, normal_B[0], normal_B[1],\n",
        "          head_width=0.3, head_length=0.25, fc='#dc2626', ec='#dc2626', linewidth=2.5)\n",
        "\n",
        "# Add arrows for x1 >= 0 constraint (vertical line at x1=0)\n",
        "# Normal vector points to the right (positive x1 direction)\n",
        "plt.arrow(0, 2, arrow_length, 0,\n",
        "          head_width=0.3, head_length=0.25, fc='#16a34a', ec='#16a34a', linewidth=2.5)\n",
        "\n",
        "# Add arrows for x2 >= 0 constraint (horizontal line at x2=0)\n",
        "# Normal vector points upward (positive x2 direction)\n",
        "plt.arrow(4, 0, 0, arrow_length,\n",
        "          head_width=0.3, head_length=0.25, fc='#9333ea', ec='#9333ea', linewidth=2.5)\n",
        "\n",
        "plt.scatter([6, 0, 10, 0], [0, 8, 0, 5], color='black', s=80, zorder=5)\n",
        "plt.text(6, -0.5, '(6, 0)', ha='center', fontsize=14)\n",
        "plt.text(-0.6, 8, '(0, 8)', fontsize=14)\n",
        "plt.text(10, -0.5, '(10, 0)', ha='center', fontsize=14)\n",
        "plt.text(-0.6, 5, '(0, 5)', fontsize=14)\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Constraint Lines', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.grid(alpha=0.25)\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-1, 12)\n",
        "plt.ylim(-1, 10)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "48a50457",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 4: Identify Feasible Region\n",
        "\n",
        "Shade the region that satisfies **all constraints**:\n",
        "\n",
        "- Below Material A line (4x‚ÇÅ + 3x‚ÇÇ ‚â§ 24)\n",
        "- Below Material B line (3x‚ÇÅ + 6x‚ÇÇ ‚â§ 30)\n",
        "- First quadrant (x‚ÇÅ, x‚ÇÇ ‚â• 0)\n",
        " \n",
        "---"
      ],
      "id": "555531f6"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 12, 400)\n",
        "x2_A = (24 - 4*x1) / 3\n",
        "x2_B = (30 - 3*x1) / 6\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_A, color='#2563eb', linewidth=2.5, label='$4x_1 + 3x_2 \\\\leq 24$')\n",
        "plt.plot(x1, x2_B, color='#dc2626', linewidth=2.5, label='$3x_1 + 6x_2 \\\\leq 30$')\n",
        "\n",
        "x1_fill = np.linspace(0, 6, 400)\n",
        "x2_fill = np.minimum((24 - 4*x1_fill) / 3, (30 - 3*x1_fill) / 6)\n",
        "plt.fill_between(x1_fill, 0, x2_fill, alpha=0.35, color='#10b981', label='Feasible Region')\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Feasible Region Visualization', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.grid(alpha=0.25, linestyle='--')\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-1, 12)\n",
        "plt.ylim(-1, 10)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "6c5433d8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 5: Find Corner Points\n",
        "\n",
        "The corner points of the feasible region are:\n",
        "\n",
        "- **Point A:** (0, 0) ‚Äî Origin\n",
        "- **Point B:** (0, 5) ‚Äî Intersection with y-axis\n",
        "- **Point C:** (?, ?) ‚Äî Intersection of two constraints\n",
        "- **Point D:** (6, 0) ‚Äî Intersection with x-axis\n",
        "\n",
        "**Find Point C:** Solve the system:\n",
        "$$\\begin{align}\n",
        "4x_1 + 3x_2 &= 24 \\\\\n",
        "3x_1 + 6x_2 &= 30\n",
        "\\end{align}$$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Finding Point C\n",
        "\n",
        "**Method: Elimination**\n",
        "\n",
        "Multiply first equation by 2:\n",
        "$$8x_1 + 6x_2 = 48 \\quad \\text{...(1)}$$\n",
        "\n",
        "Keep second equation:\n",
        "$$3x_1 + 6x_2 = 30 \\quad \\text{...(2)}$$\n",
        "\n",
        "Subtract (2) from (1):\n",
        "$$5x_1 = 18 \\implies x_1 = 3.6$$\n",
        "\n",
        "Substitute back: $x_2 = 3.2$\n",
        "\n",
        "**Point C = (3.6, 3.2)**\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "#### Corner Points Visualization"
      ],
      "id": "39c77bbe"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "x1 = np.linspace(0, 12, 400)\n",
        "x2_A = (24 - 4*x1) / 3\n",
        "x2_B = (30 - 3*x1) / 6\n",
        "\n",
        "ax.plot(x1, x2_A, color='#2563eb', linewidth=3, label='Material A')\n",
        "ax.plot(x1, x2_B, color='#dc2626', linewidth=3, label='Material B')\n",
        "\n",
        "x1_fill = np.linspace(0, 6, 400)\n",
        "x2_fill = np.minimum((24 - 4*x1_fill) / 3, (30 - 3*x1_fill) / 6)\n",
        "ax.fill_between(x1_fill, 0, x2_fill, color='#10b981', alpha=0.4, label='Feasible Region')\n",
        "\n",
        "corners = [(0, 0), (0, 5), (3.6, 3.2), (6, 0)]\n",
        "labels = ['A (0, 0)', 'B (0, 5)', 'C (3.6, 3.2)', 'D (6, 0)']\n",
        "colors = ['#0ea5e9', '#f59e0b', '#22c55e', '#6366f1']\n",
        "\n",
        "for (x, y), label, c in zip(corners, labels, colors):\n",
        "    ax.scatter(x, y, s=150, color=c, edgecolor='black', linewidth=1.2, zorder=5)\n",
        "    ax.text(x + 0.25, y + 0.25, label, fontsize=14, weight='bold', color='#1e293b')\n",
        "\n",
        "ax.set_xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "ax.set_ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "ax.set_xlim(-1, 12)\n",
        "ax.set_ylim(-1, 10)\n",
        "ax.set_title('Corner Points of Feasible Region', fontsize=22, weight='bold', color='#1e293b')\n",
        "ax.legend(fontsize=14, loc='upper right', frameon=False)\n",
        "ax.grid(alpha=0.25, linestyle='--')\n",
        "ax.axhline(0, color='black', linewidth=1.2)\n",
        "ax.axvline(0, color='black', linewidth=1.2)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "344309fc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "#### Step 6: Evaluate Objective Function\n",
        "\n",
        "Substitute each corner point into $Z = 5x_1 + 4x_2$:\n",
        "\n",
        "| Point | $(x_1, x_2)$ | $Z = 5x_1 + 4x_2$ | Value |\n",
        "|:-----:|:------------:|:-----------------:|:-----:|\n",
        "| A     | (0, 0)       | $5(0) + 4(0)$     | **0** |\n",
        "| B     | (0, 5)       | $5(0) + 4(5)$     | **20** |\n",
        "| C     | (3.6, 3.2)   | $5(3.6) + 4(3.2)$ | **30.8** |\n",
        "| D     | (6, 0)       | $5(6) + 4(0)$     | **30** |\n",
        "\n",
        "**Maximum value:** $Z = 30.8$ at point **C (3.6, 3.2)**\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Optimal Solution\n",
        "\n",
        ":::{.callout-tip icon=true}\n",
        "## Final Answer\n",
        "\n",
        "**Optimal Production Plan:**\n",
        "- Produce $x_1^* = 3.6$ tons of Paint 1\n",
        "- Produce $x_2^* = 3.2$ tons of Paint 2\n",
        "\n",
        "**Maximum Profit:** $Z^* = \\$30.80$\n",
        "\n",
        "**Resource Utilization:**\n",
        "- Material A: $4(3.6) + 3(3.2) = 24$ units ‚úì (fully used)\n",
        "- Material B: $3(3.6) + 6(3.2) = 30$ units ‚úì (fully used)\n",
        "\n",
        "Both resources are **binding constraints** (fully utilized).\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "### Example 2\n",
        "\n",
        "Taking problem from **Example 2**: \n",
        "\n",
        "**Maximize:** $Z = 30x_1 + 40x_2$\n",
        "\n",
        "**Subject to:**\n",
        "$$\\begin{align}\n",
        "2x_1 + x_2 &\\leq 100 \\quad \\text{(Machine 1)}\\\\\n",
        "x_1 + 2x_2 &\\leq 80 \\quad \\text{(Machine 2)}\\\\\n",
        "x_1, x_2 &\\geq 0 \\quad \\text{(Non-negativity)}\n",
        "\\end{align}$$\n",
        "\n",
        "---\n",
        "\n",
        "#### Step 1: Convert to Equations\n",
        "\n",
        "Convert inequalities to equations:\n",
        "\n",
        "- Machine 1: $2x_1 + x_2 = 100$\n",
        "- Machine 2: $x_1 + 2x_2 = 80$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "### Step 2: Find Intercepts\n",
        "\n",
        "For **Machine 1:** $2x_1 + x_2 = 100$\n",
        "\n",
        "- When $x_1 = 0$: $x_2 = 100$\n",
        "- When $x_2 = 0$: $2x_1 = 100$ ‚Üí $x_1 = 50$\n",
        "\n",
        "For **Machine 2:** $x_1 + 2x_2 = 80$\n",
        "\n",
        "- When $x_1 = 0$: $2x_2 = 80$ ‚Üí $x_2 = 40$\n",
        "- When $x_2 = 0$: $x_1 = 80$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 3: Plot the Constraints"
      ],
      "id": "6440aa5e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 90, 400)\n",
        "x2_M1 = 100 - 2*x1\n",
        "x2_M2 = (80 - x1) / 2\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_M1, color='#2563eb', linewidth=3, label='Machine 1: $2x_1 + x_2 = 100$')\n",
        "plt.plot(x1, x2_M2, color='#dc2626', linewidth=3, label='Machine 2: $x_1 + 2x_2 = 80$')\n",
        "\n",
        "plt.scatter([50, 0, 80, 0], [0, 100, 0, 40], color='black', s=80, zorder=5)\n",
        "plt.text(50, -4, '(50, 0)', ha='center', fontsize=14)\n",
        "plt.text(-4, 100, '(0, 100)', fontsize=14)\n",
        "plt.text(80, -4, '(80, 0)', ha='center', fontsize=14)\n",
        "plt.text(-4, 40, '(0, 40)', fontsize=14)\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Constraint Lines', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.grid(alpha=0.25)\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-5, 90)\n",
        "plt.ylim(-5, 110)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "38695d8d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---"
      ],
      "id": "1d178876"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 90, 400)\n",
        "x2_M1 = 100 - 2*x1\n",
        "x2_M2 = (80 - x1) / 2\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_M1, color='#2563eb', linewidth=3, label='Machine 1: $2x_1 + x_2 = 100$')\n",
        "plt.plot(x1, x2_M2, color='#dc2626', linewidth=3, label='Machine 2: $x_1 + 2x_2 = 80$')\n",
        "\n",
        "# Add arrows perpendicular to constraint lines\n",
        "# For Machine 1: 2x1 + x2 = 100, the gradient (normal vector) is (2, 1)\n",
        "arrow_length = 10\n",
        "x1_point_M1 = 25\n",
        "x2_point_M1 = 100 - 2*x1_point_M1\n",
        "normal_M1 = np.array([-2, -1])\n",
        "normal_M1 = normal_M1 / np.linalg.norm(normal_M1) * arrow_length\n",
        "plt.arrow(x1_point_M1, x2_point_M1, normal_M1[0], normal_M1[1], \n",
        "          head_width=3, head_length=2.5, fc='#2563eb', ec='#2563eb', linewidth=2.5)\n",
        "\n",
        "# For Machine 2: x1 + 2x2 = 80, the gradient (normal vector) is (1, 2)\n",
        "x1_point_M2 = 40\n",
        "x2_point_M2 = (80 - x1_point_M2) / 2\n",
        "normal_M2 = np.array([-1, -2])\n",
        "normal_M2 = normal_M2 / np.linalg.norm(normal_M2) * arrow_length\n",
        "plt.arrow(x1_point_M2, x2_point_M2, normal_M2[0], normal_M2[1],\n",
        "          head_width=3, head_length=2.5, fc='#dc2626', ec='#dc2626', linewidth=2.5)\n",
        "\n",
        "# Add arrows for x1 >= 0 constraint (vertical line at x1=0)\n",
        "plt.arrow(0, 20, arrow_length, 0,\n",
        "          head_width=3, head_length=2.5, fc='#16a34a', ec='#16a34a', linewidth=2.5)\n",
        "\n",
        "# Add arrows for x2 >= 0 constraint (horizontal line at x2=0)\n",
        "plt.arrow(30, 0, 0, arrow_length,\n",
        "          head_width=3, head_length=2.5, fc='#9333ea', ec='#9333ea', linewidth=2.5)\n",
        "\n",
        "plt.scatter([50, 0, 80, 0], [0, 100, 0, 40], color='black', s=80, zorder=5)\n",
        "plt.text(50, -4, '(50, 0)', ha='center', fontsize=14)\n",
        "plt.text(-4, 100, '(0, 100)', fontsize=14)\n",
        "plt.text(80, -4, '(80, 0)', ha='center', fontsize=14)\n",
        "plt.text(-4, 40, '(0, 40)', fontsize=14)\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Constraint Lines', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.grid(alpha=0.25)\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-5, 90)\n",
        "plt.ylim(-5, 110)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "a620ce66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 4: Identify Feasible Region\n",
        "\n",
        "Shade the region that satisfies **all constraints**:\n",
        "\n",
        "- Below Machine 1 line (2x‚ÇÅ + x‚ÇÇ ‚â§ 100)\n",
        "- Below Machine 2 line (x‚ÇÅ + 2x‚ÇÇ ‚â§ 80)\n",
        "- First quadrant (x‚ÇÅ, x‚ÇÇ ‚â• 0)\n",
        " \n",
        "---"
      ],
      "id": "131d61f1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x1 = np.linspace(0, 90, 400)\n",
        "x2_M1 = 100 - 2*x1\n",
        "x2_M2 = (80 - x1) / 2\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.plot(x1, x2_M1, color='#2563eb', linewidth=2.5, label='$2x_1 + x_2 \\\\leq 100$')\n",
        "plt.plot(x1, x2_M2, color='#dc2626', linewidth=2.5, label='$x_1 + 2x_2 \\\\leq 80$')\n",
        "\n",
        "x1_fill = np.linspace(0, 50, 400)\n",
        "x2_fill = np.minimum(100 - 2*x1_fill, (80 - x1_fill) / 2)\n",
        "plt.fill_between(x1_fill, 0, x2_fill, alpha=0.35, color='#10b981', label='Feasible Region')\n",
        "\n",
        "plt.xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "plt.title('Feasible Region Visualization', fontsize=22, weight='bold', color='#1e293b')\n",
        "plt.legend(fontsize=14, frameon=False)\n",
        "plt.grid(alpha=0.25, linestyle='--')\n",
        "plt.axhline(0, color='black', linewidth=1.2)\n",
        "plt.axvline(0, color='black', linewidth=1.2)\n",
        "plt.xlim(-5, 90)\n",
        "plt.ylim(-5, 110)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "f2314587",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Step 5: Find Corner Points\n",
        "\n",
        "The corner points of the feasible region are:\n",
        "\n",
        "- **Point A:** (0, 0) ‚Äî Origin\n",
        "- **Point B:** (0, 40) ‚Äî Intersection with y-axis\n",
        "- **Point C:** (?, ?) ‚Äî Intersection of two constraints\n",
        "- **Point D:** (50, 0) ‚Äî Intersection with x-axis\n",
        "\n",
        "**Find Point C:** Solve the system:\n",
        "$$\\begin{align}\n",
        "2x_1 + x_2 &= 100 \\\\\n",
        "x_1 + 2x_2 &= 80\n",
        "\\end{align}$$\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Finding Point C\n",
        "\n",
        "**Method: Elimination**\n",
        "\n",
        "Multiply second equation by 2:\n",
        "$$2x_1 + 4x_2 = 160 \\quad \\text{...(1)}$$\n",
        "\n",
        "Keep first equation:\n",
        "$$2x_1 + x_2 = 100 \\quad \\text{...(2)}$$\n",
        "\n",
        "Subtract (2) from (1):\n",
        "$$3x_2 = 60 \\implies x_2 = 20$$\n",
        "\n",
        "Substitute back: $2x_1 + 20 = 100 \\implies x_1 = 40$\n",
        "\n",
        "**Point C = (40, 20)**\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "#### Corner Points Visualization"
      ],
      "id": "828d21a8"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 10,
        "fig-height": 8
      },
      "source": [
        "#| echo: true\n",
        "#| code-fold: true\n",
        "#| code-summary: Code for this Fig.\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 8))\n",
        "\n",
        "x1 = np.linspace(0, 90, 400)\n",
        "x2_M1 = 100 - 2*x1\n",
        "x2_M2 = (80 - x1) / 2\n",
        "\n",
        "ax.plot(x1, x2_M1, color='#2563eb', linewidth=3, label='Machine 1')\n",
        "ax.plot(x1, x2_M2, color='#dc2626', linewidth=3, label='Machine 2')\n",
        "\n",
        "x1_fill = np.linspace(0, 50, 400)\n",
        "x2_fill = np.minimum(100 - 2*x1_fill, (80 - x1_fill) / 2)\n",
        "ax.fill_between(x1_fill, 0, x2_fill, color='#10b981', alpha=0.4, label='Feasible Region')\n",
        "\n",
        "corners = [(0, 0), (0, 40), (40, 20), (50, 0)]\n",
        "labels = ['A (0, 0)', 'B (0, 40)', 'C (40, 20)', 'D (50, 0)']\n",
        "colors = ['#0ea5e9', '#f59e0b', '#22c55e', '#6366f1']\n",
        "\n",
        "for (x, y), label, c in zip(corners, labels, colors):\n",
        "    ax.scatter(x, y, s=150, color=c, edgecolor='black', linewidth=1.2, zorder=5)\n",
        "    ax.text(x + 2, y + 2.5, label, fontsize=14, weight='bold', color='#1e293b')\n",
        "\n",
        "ax.set_xlabel('$x_1$', fontsize=18, weight='bold')\n",
        "ax.set_ylabel('$x_2$', fontsize=18, weight='bold')\n",
        "ax.set_xlim(-5, 90)\n",
        "ax.set_ylim(-5, 110)\n",
        "ax.set_title('Corner Points of Feasible Region', fontsize=22, weight='bold', color='#1e293b')\n",
        "ax.legend(fontsize=14, loc='upper right', frameon=False)\n",
        "ax.grid(alpha=0.25, linestyle='--')\n",
        "ax.axhline(0, color='black', linewidth=1.2)\n",
        "ax.axvline(0, color='black', linewidth=1.2)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7943a84a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "## Graphical Method\n",
        "\n",
        "#### Step 6: Evaluate Objective Function\n",
        "\n",
        "Substitute each corner point into $Z = 30x_1 + 40x_2$:\n",
        "\n",
        "| Point | $(x_1, x_2)$ | $Z = 30x_1 + 40x_2$ | Value |\n",
        "|:-----:|:------------:|:-------------------:|:-----:|\n",
        "| A     | (0, 0)       | $30(0) + 40(0)$     | **0** |\n",
        "| B     | (0, 40)      | $30(0) + 40(40)$    | **1600** |\n",
        "| C     | (40, 20)     | $30(40) + 40(20)$   | **2000** |\n",
        "| D     | (50, 0)      | $30(50) + 40(0)$    | **1500** |\n",
        "\n",
        "**Maximum value:** $Z = 2000$ at point **C (40, 20)**\n",
        "\n",
        "---\n",
        "\n",
        "## Graphical Method\n",
        "#### Optimal Solution\n",
        "\n",
        ":::{.callout-tip icon=true}\n",
        "## Final Answer\n",
        "\n",
        "**Optimal Production Plan:**\n",
        "- Produce $x_1^* = 40$ units of Product A\n",
        "- Produce $x_2^* = 20$ units of Product B\n",
        "\n",
        "**Maximum Profit:** $Z^* = \\$2000$\n",
        "\n",
        "**Resource Utilization:**\n",
        "- Machine 1: $2(40) + 20 = 100$ hours ‚úì (fully used)\n",
        "- Machine 2: $40 + 2(20) = 80$ hours ‚úì (fully used)\n",
        "\n",
        "Both machines are **binding constraints** (fully utilized).\n",
        ":::\n",
        "\n",
        "# üéâ That‚Äôs a Wrap! üéâ\n",
        "\n",
        "*Hope you had fun and learned something new* üòÑ  \n",
        "\n",
        "**See you next time!** üëã\n"
      ],
      "id": "a6feb266"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\user\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}