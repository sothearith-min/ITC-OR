[
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html",
    "href": "Slides/TD/TD1/Python_TD1.html",
    "title": "Solution to TD1",
    "section": "",
    "text": "We will only solve Problems 6, 7, 8, 9, 10, and 11 here, as the others (4 and 5) require the simplex method, while Problems 1, 2, and 3 focus on formulation."
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-6-solve-problem-1",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-6-solve-problem-1",
    "title": "Solution to TD1",
    "section": "Problem 6 — Solve Problem 1",
    "text": "Problem 6 — Solve Problem 1\n\nMaximize\n\\[Z = 40x_A + 90x_B\\]\nSubject to\n\\[\\begin{aligned}\nx_A - 4x_B &\\ge 0\\\\\nx_A &\\le 110\\\\\nx_A + 2x_B &\\le 150\\\\\nx_A,\\;x_B &\\ge 0\n\\end{aligned}\\]\n\n\nSolution from scipy.optimize.linprog\nNote that the function only supports minimization, so you will need to minimize the negative of the objective function.\n\nfrom scipy.optimize import linprog\n\n# Maximize Z = 40*xA + 90*xB -&gt; linprog minimizes, so use -Z\nc = [-40, -90]\n\n# Constraints\n# xA- 4xB &gt;= 0 -&gt; -xA + 4xB &lt;= 0\n# 1*xA + 2*xB &lt;= 300\n# xA &lt;= 110\nA = [[-1, 4],\n     [1, 2],\n     [1, 0]]\nb = [0, 150, 110]\n\n# Bounds xA, xB &gt;=0\nx0_bounds = (0, None)\nx1_bounds = (0, None)\n\nres1 = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds])   \n\nprint(\"Problem 1 Optimal solution:\")\nprint(\"xA =\", res1.x[0])\nprint(\"xB =\", res1.x[1])\nprint(\"Maximum Z =\", -res1.fun)\n\nProblem 1 Optimal solution:\nxA = 100.0\nxB = 25.0\nMaximum Z = 6250.0\n\n\n\n\nPlotting\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n\nrcParams['font.family'] = 'Trebuchet MS'\n\n# ---------------- Problem 1 ----------------\nx_A = np.linspace(0, 150, 400)\nx_B1 = x_A / 4\nx_B2 = (150 - x_A) / 2\nplt.figure(figsize=(10, 8))\nplt.plot(x_A, x_B1, label=r'$x_A = 4x_B$', color='#2E86AB', linewidth=2.5)\nplt.plot(x_A, x_B2, label=r'$x_A + 2x_B = 150$', color='#A23B72', linewidth=2.5)\nplt.axvline(x=110, color='#F18F01', linestyle='--', linewidth=2.5, label=r'$x_A = 110$')\nx_fill = np.linspace(0, 110, 400)\ny_upper = np.minimum(x_fill / 4, (150 - x_fill)/2)\nplt.fill_between(x_fill, 0, y_upper, color='#C6DABF', alpha=0.6, label='Feasible Region')\npoints = np.array([[0,0],[100,25],[110,20]])\nplt.plot(points[:,0], points[:,1], 'o', color='#6A4C93', markersize=8)\nfor x,y in points:\n    plt.text(x+3, y+2.5, f'({x},{y})', fontsize=11, fontweight='bold', bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\nplt.xlim(-5,130)\nplt.ylim(-5,80)\nplt.xlabel(r'$x_A$', fontsize=13, fontweight='bold')\nplt.ylabel(r'$x_B$', fontsize=13, fontweight='bold')\nplt.title('Feasible Region', fontsize=15, fontweight='bold', pad=15)\nplt.legend(fontsize=11, loc='upper right', framealpha=0.9)\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.axhline(0, color='black', linewidth=0.8)\nplt.axvline(0, color='black', linewidth=0.8)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-7-solve-problem-2",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-7-solve-problem-2",
    "title": "Solution to TD1",
    "section": "Problem 7 — Solve Problem 2",
    "text": "Problem 7 — Solve Problem 2\n\nMaximize\n\\[Z = 0.05x_A + 0.08x_B\\]\nSubject to \\[\n\\begin{align*}\nx_A + x_B &= 5000 \\\\\nx_A &\\ge 1250 \\\\\nx_B &\\le 2500 \\\\\n2x_A - x_B &\\ge 0 \\\\\nx_A, x_B &\\ge 0\n\\end{align*}\n\\]\n\n\nSolution from scipy.optimize.linprog\n\n# Maximize Z = 0.05*xA + 0.08*xB -&gt; linprog minimizes -&gt; -Z\nc = [-0.05, -0.08]\n\n# Constraints\n# xA + xB = 5000 -&gt; split into two inequalities for linprog\n# xA &gt;= 1250 -&gt; -xA &lt;= -1250\n# xB &lt;= 2500 -&gt; xB &lt;= 2500\n# xA &gt;= 0.5*xB -&gt; -xA + 0.5*xB &lt;= 0\n\nA_ub = [\n    [1, 1],    # xA + xB &lt;= 5000\n    [-1, -1],  # -xA - xB &lt;= -5000 -&gt; xA + xB &gt;= 5000\n    [-1, 0],   # -xA &lt;= -1250 -&gt; xA &gt;= 1250\n    [0, 1],    # xB &lt;= 2500\n    [-1, 0.5]  # -xA + 0.5*xB &lt;= 0 -&gt; xA &gt;= 0.5*xB\n]\nb_ub = [5000, -5000, -1250, 2500, 0]\n\nbounds = [(0, None), (0, None)]\n\nres2 = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\nprint(\"\\nProblem 2 Optimal solution:\")\nprint(\"xA =\", res2.x[0])\nprint(\"xB =\", res2.x[1])\nprint(\"Maximum Z =\", -res2.fun)\n\n\nProblem 2 Optimal solution:\nxA = 2500.0\nxB = 2500.0\nMaximum Z = 325.0\n\n\n\n\nPlotting\n\n# ---------------- Problem 2 ----------------\ntotal = 5000\nx_A = np.linspace(0, total, 500)\nx_B = total - x_A\nx_A_feasible = np.linspace(2500, 5000, 200)\nx_B_feasible = total - x_A_feasible\npoint1 = (2500, 2500)\npoint2 = (5000, 0)\nplt.figure(figsize=(10, 8))\nplt.plot(x_A, x_B, '--', color='#999999', linewidth=1.5, label='Budget line ($x_A + x_B = 5000$)')\nplt.plot(x_A_feasible, x_B_feasible, color='#2E86AB', linewidth=2.5, label='Feasible segment')\nplt.axvline(1250, color='gray', linestyle=':', linewidth=2.5, alpha=0.7, label='$x_A = 1250$')\nplt.axhline(2500, color='#A23B72', linestyle=':', linewidth=2.5, alpha=0.7, label='$x_B = 2500$')\nplt.plot(x_A, 2*x_A, color='#F18F01', linestyle=':', linewidth=2.5, alpha=0.7, label='$x_A = 0.5 x_B$')\nplt.plot(*point1, 'o', color='#6A4C93', markersize=8)\nplt.plot(*point2, 'o', color='#6A4C93', markersize=8)\nfor x,y in [point1, point2]:\n    plt.text(x+50, y-100 if y&gt;0 else y+100, f'({x},{y})', fontsize=11, fontweight='bold', bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\nplt.xlim(0,5200)\nplt.ylim(0,5200)\nplt.xlabel(r'Investment in A ($x_A$) [$]', fontsize=13, fontweight='bold')\nplt.ylabel(r'Investment in B ($x_B$) [$]', fontsize=13, fontweight='bold')\nplt.title('Feasible Investment Segment', fontsize=15, fontweight='bold', pad=15)\nplt.legend(fontsize=11)\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.axhline(0, color='black', linewidth=0.8)\nplt.axvline(0, color='black', linewidth=0.8)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-8-solve-problem-3",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-8-solve-problem-3",
    "title": "Solution to TD1",
    "section": "Problem 8 — Solve Problem 3",
    "text": "Problem 8 — Solve Problem 3\n\nMaximize\n\\[Z =  x_R + 25x_T\\]\nSubject to \\[\n\\begin{align*}\n15x_R + 300x_T &\\leq 10000 \\\\\nx_R &\\ge 2x_T \\\\\nx_R &\\le 400 \\\\\nx_R, x_T &\\ge 0\n\\end{align*}\n\\]\n\n\nSolution from scipy.optimize.linprog\n\n# Maximize Z = xR + 25*xT -&gt; linprog minimizes -&gt; -Z\nc = [-1, -25]\n\n# Constraints in the form A_ub * x &lt;= b_ub\n# 1) Budget: xR + 20*xT &lt;= 666.67\n# 2) Radio at least twice TV: -xR + 2*xT &lt;= 0  -&gt; xR - 2xT &gt;= 0\n# 3) Max radio time: xR &lt;= 400\n\nA_ub = [\n    [1, 20],\n    [-1, 2],\n    [1, 0]\n]\nb_ub = [666.67, 0, 400]\n\n# Bounds xR, xT &gt;= 0\nbounds = [(0, None), (0, None)]\n\nres = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\nprint(\"Optimal advertising plan:\")\nprint(\"xR (radio minutes) =\", res.x[0])\nprint(\"xT (TV minutes) =\", res.x[1])\nprint(\"Maximum effectiveness Z =\", -res.fun)\n\nOptimal advertising plan:\nxR (radio minutes) = 60.60636363636363\nxT (TV minutes) = 30.303181818181816\nMaximum effectiveness Z = 818.185909090909\n\n\n\n\nPlotting\n\n# ---------------- Problem 3 ----------------\nx_R = np.linspace(0, 450, 500)\nx_T_budget = (666.67 - x_R)/20\nvertices = np.array([[60.6,30.3],[400,13.33],[400,0],[0,0]])\nplt.figure(figsize=(10,6))\nplt.fill(vertices[:,0], vertices[:,1], color='#C6DABF', alpha=0.6, label='Feasible region')\nplt.plot(2*x_R, x_R, color='#F18F01', linestyle=':', linewidth=2.5, label='x_R = 2 x_T')\nplt.plot(x_R, x_T_budget, color='#A23B72', linestyle='--', linewidth=2.5, label='Budget: x_R + 20 x_T = 666.67')\nplt.axvline(400, color='#6A4C93', linestyle='-.', linewidth=2.5, label='x_R = 400')\nplt.plot(vertices[:,0], vertices[:,1], 'o', color='#6A4C93', markersize=8)\nfor x,y in vertices:\n    plt.text(x+5, y+0.5, f'({x:.1f},{y:.1f})', fontsize=11, fontweight='bold',\n             bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\nplt.xlim(0,450)\nplt.ylim(0,35)\nplt.xlabel('Radio advertising minutes $x_R$', fontsize=13, fontweight='bold')\nplt.ylabel('TV advertising minutes $x_T$', fontsize=13, fontweight='bold')\nplt.title('Advertising Problem - Feasible Region', fontsize=15, fontweight='bold', pad=15)\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.legend(fontsize=11)\nplt.axhline(0, color='black', linewidth=0.8)\nplt.axvline(0, color='black', linewidth=0.8)\nplt.tight_layout()\n\nplt.show()"
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-9-solve-problem-9",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-9-solve-problem-9",
    "title": "Solution to TD1",
    "section": "Problem 9 — Solve Problem 9",
    "text": "Problem 9 — Solve Problem 9\n\nMinimize\n\\[Z = x_B + x_H\\]\nSubject to \\[\n\\begin{align*}\n0.10x_B + 0.25x_H &\\geq 10000\\\\\nx_H &\\leq 0.6(x_B + x_H) \\\\\nx_B, x_H &\\geq 0\\\\\n\\end{align*}\n\\]\n\n\nSolution from scipy.optimize.linprog\n\nfrom scipy.optimize import linprog\n\n# Minimize Z = xB + xH\nc = [1, 1]\n\n# Constraints A_ub * x &lt;= b_ub\nA_ub = [\n    [-2, -5],  # 2xB + 5xH &gt;= 200000 -&gt; -2xB -5xH &lt;= -200000\n    [-3, 2]    # 3xB - 2xH &gt;= 0 -&gt; -3xB + 2xH &lt;= 0\n]\nb_ub = [-200000, 0]\n\n# Bounds xB, xH &gt;= 0\nbounds = [(0, None), (0, None)]\n\nres = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\nprint(\"Optimal investment:\")\nprint(\"xB (blue chips $) =\", res.x[0])\nprint(\"xH (high tech $) =\", res.x[1])\nprint(\"Minimum total investment Z =\", res.fun)\n\nOptimal investment:\nxB (blue chips $) = 21052.63157894737\nxH (high tech $) = 31578.94736842105\nMinimum total investment Z = 52631.57894736842\n\n\n\n\nPlotting\n\n# ---------------- Problem 9 ----------------\nx_B = np.linspace(0, 120000, 500)\nx_H_yield = (200000 - 2*x_B)/5\nx_H_limit = 1.5 * x_B\nmask = (x_H_yield &lt;= x_H_limit) & (x_H_yield &gt;= 0)\nx_B_feasible = x_B[mask]\nx_H_feasible_lower = x_H_yield[mask]\nx_H_feasible_upper = x_H_limit[mask]\nx_B_opt = 200000 / (2 + 5*1.5)\nx_H_opt = 1.5 * x_B_opt\nplt.figure(figsize=(10,7))\nplt.plot(x_B, x_H_yield, color='#F18F01', linestyle='--', linewidth=2.5, label='2x_B + 5x_H = 200000')\nplt.plot(x_B, x_H_limit, color='#2E86AB', linestyle='--', linewidth=2.5, label='x_H = 1.5 x_B')\nplt.fill_between(x_B_feasible, x_H_feasible_lower, x_H_feasible_upper, color='#C6DABF', alpha=0.6, label='Feasible region')\nplt.plot(x_B_opt, x_H_opt, 'o', color='#6A4C93', markersize=8)\nplt.text(x_B_opt+2000, x_H_opt, f'({x_B_opt:.0f},{x_H_opt:.0f})', fontsize=11, fontweight='bold',\n         bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\nplt.xlim(0,100000)\nplt.ylim(0,100000)\nplt.xlabel('Investment in Blue Chips ($x_B$)', fontsize=13, fontweight='bold')\nplt.ylabel('Investment in High Tech ($x_H$)', fontsize=13, fontweight='bold')\nplt.title('Problem 9: Day Trader Investment', fontsize=15, fontweight='bold', pad=15)\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.legend(fontsize=11)\nplt.axhline(0, color='black', linewidth=0.8)\nplt.axvline(0, color='black', linewidth=0.8)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-10-solve-problem-10",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-10-solve-problem-10",
    "title": "Solution to TD1",
    "section": "Problem 10 — Solve Problem 10",
    "text": "Problem 10 — Solve Problem 10\n\nMaximize\n\\[Z = 2000x_R + 3000x_T\\]\nSubject to \\[\n\\begin{align*}\n300x_R + 2000x_T &\\leq 20000 \\\\\n300x_R &\\leq 16000 \\\\\n2000x_T &\\leq 16000 \\\\\nx_R, x_T &\\geq 1\n\\end{align*}\n\\]\n\n\nSolution from scipy.optimize.linprog\n\nfrom scipy.optimize import linprog\n\n# Maximize Z = 2000*xR + 3000*xT -&gt; linprog minimizes -&gt; -Z\nc = [-2000, -3000]\n\n# Constraints in the form A_ub * x &lt;= b_ub\n# 1) Budget: 300*xR + 2000*xT &lt;= 20000\n# 2) Radio max: 300*xR &lt;= 16000\n# 3) TV max: 2000*xT &lt;= 16000\n\nA_ub = [\n    [300, 2000],\n    [300, 0],\n    [0, 2000]\n]\nb_ub = [20000, 16000, 16000]\n\n# Bounds xR, xT &gt;= 1\nbounds = [(1, None), (1, None)]\n\nres = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\nprint(\"Optimal advertising plan:\")\nprint(\"xR (radio ads) =\", res.x[0])\nprint(\"xT (TV ads) =\", res.x[1])\nprint(\"Maximum reach Z =\", -res.fun)\n\nOptimal advertising plan:\nxR (radio ads) = 53.333333333333336\nxT (TV ads) = 2.0\nMaximum reach Z = 112666.66666666667\n\n\n\n\nPlotting\n\n# ---------------- Problem 10 ----------------\nx_R = np.linspace(1, 60, 400)\nx_T_budget = (200 - 3*x_R)/20\nx_R_min, x_R_max = 1, 53.33\nx_T_min, x_T_max = 1, 8\nplt.figure(figsize=(10,7))\nX_R, X_T = np.meshgrid(np.linspace(x_R_min, x_R_max, 300), np.linspace(x_T_min, x_T_max+1, 300))\nfeasible = (3*X_R + 20*X_T &lt;= 200) & (X_R&gt;=x_R_min) & (X_R&lt;=x_R_max) & (X_T&gt;=x_T_min) & (X_T&lt;=x_T_max)\nplt.contourf(X_R, X_T, feasible, levels=[0.5,1], colors=['#C6DABF'], alpha=0.6)\nplt.plot(x_R, x_T_budget, color='#2166ac', linestyle='-', linewidth=2.5, label=r'Budget: $3x_R + 20x_T = 200$')\nplt.axhline(y=x_T_min, color='#1b7837', linestyle='--', linewidth=2.5, label=r'$x_T = 1$')\nplt.axhline(y=x_T_max, color='#762a83', linestyle='--', linewidth=2.5, label=r'$x_T = 8$')\nplt.axvline(x=x_R_min, color='#d73027', linestyle='--', linewidth=2.5, label=r'$x_R = 1$')\nplt.axvline(x=x_R_max, color='#fdae61', linestyle='--', linewidth=2.5, label=r'$x_R = 53.33$')\npoints = np.array([[1,1],[53.33,1],[53.33,2],[13.33,8],[1,8]])\nplt.plot(points[:,0], points[:,1], 'ko', markersize=7)\nfor x,y in points:\n    plt.text(x+0.5, y+0.3, f'({x:.2f},{y:.2f})', fontsize=11, fontweight='bold', bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\nplt.xlim(0,60)\nplt.ylim(0,10)\nplt.xlabel('Number of Radio Ads ($x_R$)', fontsize=13, fontweight='bold')\nplt.ylabel('Number of TV Ads ($x_T$)', fontsize=13, fontweight='bold')\nplt.title('Top Toys Advertising: Feasible Region', fontsize=15, fontweight='bold', pad=15)\nplt.legend(fontsize=11, bbox_to_anchor=(0.6,0.45))\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Slides/TD/TD1/Python_TD1.html#problem-11-solve-problem-11",
    "href": "Slides/TD/TD1/Python_TD1.html#problem-11-solve-problem-11",
    "title": "Solution to TD1",
    "section": "Problem 11 — Solve Problem 11",
    "text": "Problem 11 — Solve Problem 11\n\nMaximize\n\\[Z = 50x_C + 100x_D\\]\nSubject to \\[\n\\begin{align*}\nx_C + 2.5x_D &\\leq 200 \\\\\nx_C &\\leq 120  \\\\\nx_D &\\leq 60 \\\\\n11x_C + 15x_D &\\leq 1650 \\\\\nx_C, x_D &\\geq 0\n\\end{align*}\n\\]\n\n\nSolution from scipy.optimize.linprog\n\nfrom scipy.optimize import linprog\n\n# Maximize Z = 50*xC + 100*xD -&gt; linprog minimizes -&gt; -Z\nc = [-50, -100]\n\n# Constraints in the form A_ub * x &lt;= b_ub\n# 1) Sawing: xC/200 + xD/80 &lt;= 1 -&gt; 0.005*xC + 0.0125*xD &lt;= 1\n# 2) Chair assembly: xC &lt;= 120 -&gt; 1*xC + 0*xD &lt;= 120\n# 3) Desk assembly: xD &lt;= 60 -&gt; 0*xC + 1*xD &lt;= 60\n# 4) Painting: xC/150 + xD/110 &lt;= 1 -&gt; 0.0066667*xC + 0.0090909*xD &lt;= 1\n\nA_ub = [\n    [1/200, 1/80],\n    [1, 0],\n    [0, 1],\n    [1/150, 1/110]\n]\nb_ub = [1, 120, 60, 1]\n\n# Bounds xC, xD &gt;= 0\nbounds = [(0, None), (0, None)]\n\nres = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds)\nprint(\"Optimal production plan:\")\nprint(\"xC (chairs) =\", res.x[0])\nprint(\"xD (desks) =\", res.x[1])\nprint(\"Maximum profit Z =\", -res.fun)\n\nOptimal production plan:\nxC (chairs) = 90.0\nxD (desks) = 44.0\nMaximum profit Z = 8900.0\n\n\n\n\nPlotting\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx_C = np.linspace(0, 130, 400)\nx_D_sawing = (200 - x_C)/2.5\nx_D_painting = (1650 - 11*x_C)/15\nx_C_grid = np.linspace(0,130,300)\nx_D_grid = np.linspace(0,70,300)\nX_C, X_D = np.meshgrid(x_C_grid, x_D_grid)\nfeasible = (X_C + 2.5*X_D &lt;= 200) & (X_D&lt;=60) & (X_C&lt;=120) & (11*X_C + 15*X_D &lt;=1650) & (X_C&gt;=0) & (X_D&gt;=0)\n\nA = np.array([[1,2.5],[11,15]])\nb = np.array([200,1650])\nx_int = np.linalg.solve(A,b)\nx_C_int, x_D_int = x_int\n\nx_D_paint_at_120 = (1650 - 11*120)/15\n\nplt.figure(figsize=(10,7))\nplt.contourf(X_C, X_D, feasible, levels=[0.5,1], colors=['#C6DABF'], alpha=0.5)\nplt.plot(x_C, x_D_sawing, color='#1f77b4', linewidth=2.5, label=r'Sawing: $x_C + 2.5x_D = 200$')\nplt.plot(x_C, x_D_painting, color='#ff7f0e', linewidth=2.5, label=r'Painting: $11x_C + 15x_D = 1650$')\nplt.axhline(60, color='#2ca02c', linestyle='--', linewidth=2.5, label=r'$x_D = 60$')\nplt.axvline(120, color='#d62728', linestyle='--', linewidth=2.5, label=r'$x_C = 120$')\n\npoints = np.array([\n    [0,0],\n    [0,60],\n    [50,60],\n    [x_C_int, x_D_int],\n    [120, x_D_paint_at_120],\n    [120,0]\n])\n\nplt.plot(points[:,0], points[:,1], 'ko', markersize=7)\nfor x,y in points:\n    plt.text(x+1, y+1, f'({x:.0f},{y:.0f})', fontsize=11,  bbox=dict(boxstyle='round,pad=0.4', facecolor='white', edgecolor='gray', alpha=0.8))\n\nplt.xlabel(r'Number of Chairs ($x_C$)', fontsize=13, fontweight='bold')\nplt.ylabel(r'Number of Desks ($x_D$)', fontsize=13, fontweight='bold')\nplt.title('Feasible Region for Furniture Production', fontsize=15, fontweight='bold', pad=15)\nplt.xlim(0,130)\nplt.ylim(0,70)\nplt.grid(True, linestyle='--', alpha=0.3)\nplt.legend(fontsize=11)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Operations Research",
    "section": "",
    "text": "Lecturer: Sothearith Min | Contact: https://sothearith-min.github.io/minsothearith.github.io/"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Operations Research",
    "section": "📘 Introduction",
    "text": "📘 Introduction\nIn this course, we will learn how to solve complex decision-making problems using mathematical optimization techniques. We will explore linear programming, transportation and assignment models, queuing systems, scheduling algorithms, and game theory to make better decisions in real-world scenarios."
  },
  {
    "objectID": "index.html#learning-hours",
    "href": "index.html#learning-hours",
    "title": "Operations Research",
    "section": "⏰ Learning Hours",
    "text": "⏰ Learning Hours\nCredits: 3 (Course = 2, TD = 1, TP = 0)\nCourse Hours: 32 hours per semester\nTutorial (TD): 32 hours per semester\n📄 Download Course Syllabus"
  },
  {
    "objectID": "index.html#grading-criteria",
    "href": "index.html#grading-criteria",
    "title": "Operations Research",
    "section": "📊 Grading Criteria",
    "text": "📊 Grading Criteria\n\n\n\nComponent\nWeight\n\n\n\n\nAttendance\n10%\n\n\nAssignment\n10%\n\n\nClass Activities\n10%\n\n\nMid-term Exam\n30%\n\n\nFinal Exam\n40%"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Operations Research",
    "section": "📖 References",
    "text": "📖 References\n\nTaha, H. A. (2017). Operations Research: An Introduction (10th ed.). Pearson.\nHillier, F. S., Lieberman, G. J. (2021). Introduction to Operations Research (11th ed.). McGraw-Hill Education.\nBaker, K. R., Trietsch, D. (2009). Principles of Sequencing and Scheduling. John Wiley & Sons."
  },
  {
    "objectID": "index.html#computer-tools",
    "href": "index.html#computer-tools",
    "title": "Operations Research",
    "section": "💻 Computer Tools",
    "text": "💻 Computer Tools\nWe will use Python with libraries such as PuLP, SciPy, and NumPy for solving optimization problems throughout this course.\nGetting Started:\n\nInstall Jupyter Notebook\nAccess Google Colab (No installation needed!)"
  },
  {
    "objectID": "index.html#course-resources",
    "href": "index.html#course-resources",
    "title": "Operations Research",
    "section": "📚 Course Resources",
    "text": "📚 Course Resources\n\n\n\nWeek\nSlides\nTD\nSolution\nPython\n\n\n\n\nWeek 1\nSlides\nTD\nSolution\nPython\n\n\nWeek 2\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 3\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 4\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 5\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 6\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 7\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 8\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 9\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 10\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 11\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 12\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 13\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 14\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 15\nLoading…\nLoading…\nLoading…\nLoading…\n\n\nWeek 16\nLoading…\nLoading…\nLoading…\nLoading…"
  },
  {
    "objectID": "index.html#attendance",
    "href": "index.html#attendance",
    "title": "Operations Research",
    "section": "👥 Attendance",
    "text": "👥 Attendance"
  },
  {
    "objectID": "index.html#td-participation",
    "href": "index.html#td-participation",
    "title": "Operations Research",
    "section": "🧮 TD Participation",
    "text": "🧮 TD Participation"
  }
]